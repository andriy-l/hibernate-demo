Після створення таблиць в базі даних встановлюється відповідність між POJO-класами і таблицями.
Об'єктно-реляційне відображення описується у вигляді анотацій.
Анотація @Entity вказує, що даний клас є сутністю бізнес-моделі;
Анотація @Table (name = "COURSE") вказує на таблицю в БД.
Якщо назва таблиці співпадає з ім'ям класу, то його можна опустити.
Для ідентифікації конкретного запису в базі даних потрібне ключове поле - анотація @Id
Анотація @Column (name = ("LAST_NAME")) вказує на відповідність полів класу та стовпців бази даних.
Аннотація @GenericGenerator (name = "auto_inc", strategy = "increment"),
@GeneratedValue(generator = "auto_inc") задають спосіб генерування значення в даному стовпці,
можливі його значення: increment (приріст), identity (тотожність),
sequence (послідовність), hilo, seqhilo, uuid, guid, native, assigned (призначений), select (вибрати), foreign.

Крім того слід звернути увагу на наступні анотації:
@ManyToMany (cascade = CascadeType.ALL) - використовується для індикації зв'язку таблиць (класів).
Наприклад, об'єкт одного класу містить посилання на об'єкт іншого класу, а останній, у свою чергу,
містить колекцію об'єктів першого класу. Тип каскаду використовується для визначення каскадних операцій
і може приймати такі значення: ALL, PERSIST, MERGE, REMOVE, REFRESH.
@JoinTable (name = ("course_student"),
JoinColumns = {@JoinColumn (name = ("course_id"))),
InverseJoinColumns = {@JoinColumn (name = ("student_id")))) - визначає ім'я зв'язуючої таблиці
та імена зовнішніх ключів у асоційованих сутностях.

Анотація @NamedQuery (name = "findStudentByLastName",
Query = "SELECT s FROM Student s WHERE s.lastName =: lastName") визначає іменований HQL (Hibernate Query Language) запит.
 HQL-запити - це аналог SQL-запитів для Hibernate.
 При виконанні HQL-запросів, Hibernate генерує відповідний поточній базі даних SQL-запит.
 HQL значно зручніший стандартного SQL, проте він підтримує лише ті функції,
 які в тому чи іншому вигляді реалізуються в більшості баз даних.
 Варто пам'ятати, що вписуються не назви таблиць, а назви класів.

@NotNull - валідатор, який буде стежити за тим, щоб поле не було пустим.
@Length - валідатор, який буде стежити за тим, щоб вміст стрічкової змінної не перевищував визначену довжину.
Валидатори - частина Hibernate технології, яка дозволяє накладати обмеження на допустимі значення полів.
 Спрацювання валідаторів відбувається, коли виконується спроба збереження об'єкта.
 Крім широкого набобру стандартних віріаторів, Hibernate надає можливість створення власних.
Необхідно відзначити, що, взагалі кажучи, для того, щоб відобразити простий клас в базу,
достатньо всього двох анотацій: @Entity і @Id.
Всі інші дані про відображувані класи Hibernate збирає сам за допомогою механізму відображень (reflection).
Поля, які не потрібно відображувати в базу даних позначаються анотацією @Transient